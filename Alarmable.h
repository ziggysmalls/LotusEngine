#ifndef _Alarmable
#define _Alarmable

#include "AlarmableManager.h"
#include "RegistrationState.h"
class AlarmRegistrationCommand;
class AlarmDeregistrationCommand;
class Alarmable
{
	friend class AlarmableAttorney;
private:
	

	struct RegistrationData
	{
		AlarmableManager::TimeLineRef pMyDeleteRef;
		RegistrationState::RegStates AlarmCurrentState = RegistrationState::RegStates::CURRENTLY_DEREGISTERED;
		AlarmRegistrationCommand* pRegistrationCmd = nullptr;
		AlarmDeregistrationCommand* pDeregistrationCmd = nullptr;
	};

	RegistrationData RegData[AlarmableManager::AlarmNumber];

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \ingroup ALARMS
	/// <summary>	Alarm 0. </summary>
	///
	/// <remarks>	Ezequ, 3/10/2021. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Alarm0() {};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \ingroup ALARMS
	/// <summary>	Alarm 1. </summary>
	///
	/// <remarks>	Ezequ, 3/10/2021. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Alarm1() {};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \ingroup ALARMS
	/// <summary>	Alarm 2. </summary>
	///
	/// <remarks>	Ezequ, 3/10/2021. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Alarm2() {};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \ingroup ALARMS
	/// <summary>	Trigger alarm. </summary>
	///
	/// <remarks>	Ezequ, 3/10/2021. </remarks>
	///
	/// <param name="id">	The identifier. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void TriggerAlarm(AlarmableManager::Alarm_ID id);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \ingroup ALARMS
	/// <summary>	Command Functions. </summary>
	///
	/// <remarks>	Ezequ, 3/10/2021. </remarks>
	///
	/// <param name="id">	The identifier. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void AlarmDeregistration(AlarmableManager::Alarm_ID id);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \ingroup ALARMS
	/// <summary>	Alarm registration. </summary>
	///
	/// <remarks>	Ezequ, 3/10/2021. </remarks>
	///
	/// <param name="t"> 	A float to process. </param>
	/// <param name="id">	The identifier. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void AlarmRegistration(float t, AlarmableManager::Alarm_ID id);

protected:
	Alarmable();
	Alarmable(const Alarmable&) = delete;
	Alarmable& operator=(const Alarmable&) = delete;
	virtual ~Alarmable();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \ingroup ALARMS
	/// <summary>	User Functions. </summary>
	///
	/// <remarks>	Ezequ, 3/10/2021. </remarks>
	///
	/// <param name="id">	The identifier. </param>
	/// <param name="t"> 	A float to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SubmitAlarmRegistration(AlarmableManager::Alarm_ID id, float t);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \ingroup ALARMS
	/// <summary>	Submit alarm deregistration. </summary>
	///
	/// <remarks>	Ezequ, 3/10/2021. </remarks>
	///
	/// <param name="id">	The identifier. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SubmitAlarmDeregistration(AlarmableManager::Alarm_ID id);

};

#endif _Alarmable